#ifndef BASE
#define BASE $300
#endif

#ifndef SERIAL_BASE
#define SERIAL_BASE $C300
#endif

; Apple-1 Cassette Interface locations
#define tape_in $C081

; Apple-1 Serial Interface locations
#define serial_ready SERIAL_BASE
#define serial_read  SERIAL_BASE + $80
#define serial_write SERIAL_BASE + $81
#define serial_reset_routine SERIAL_BASE + $23A

; Wozmon addresses
#define monitor $FF1F
#define echo    $FFEF
#define prhex   $FFE5

; ZP variables

; Last tape input state
#define last_state $29

; Number of test runs
#define runs_num $30
#define current_run $3A
#define current_run_bcd $3B
#define passed_runs_bcd $3C
#define failed_runs_bcd $3D

; Checksum running address variables
#define running_addr_l $32
#define running_addr_h $33

; Begin address of comparison block
#define hex1_l $34
#define hex1_h $35

; End address of comparison block
#define hex2_l $36
#define hex2_h $37

; checksum
#define checksum $38
#define running_checksum $39

; string printing variables
#define str_len     $40
#define str_addr    $41

#define start_signal 'S'

* = BASE
acitest
    cld
    jsr clear_running_addr    ; clear addresses for checksum calculation
    jsr calculate_checksum    ; calculate checksum
    lda #$00                  ; clear current run counters
    sta current_run
    sta current_run_bcd
    sta passed_runs_bcd
    sta failed_runs_bcd

acitest_loop
    jsr serial_reset_routine  ; reset serial interface
    jsr clear_running_addr    ; clear addresses for running checkusm calculation
    jsr read_tape             ; read the audio data

    inc current_run           ; increment current run
    ldx #current_run_bcd
    jsr increment_bcd

    jsr print_result          ; print results

    lda runs_num              ; check if we should break the loop
    cmp current_run
    bne acitest_loop
acitest_end
    jsr print_summary
    jmp monitor



clear_running_addr
    lda hex1_l                 ; copy begin address of comparison block to running address
    sta running_addr_l
    lda hex1_h
    sta running_addr_h
    rts


print_result
    lda checksum
    cmp running_checksum
    bne print_result_fail

print_result_passed
    ldx #passed_runs_bcd       ; increment passed runs number
    jsr increment_bcd

    lda #<pass_str
    sta str_addr
    lda #>pass_str
    sta str_addr+1
    jsr print_str
    jmp print_run

print_result_fail
    ldx #failed_runs_bcd       ; increment failed runs number
    jsr increment_bcd

    lda #<fail_str
    sta str_addr
    lda #>fail_str
    sta str_addr+1
    jsr print_str
print_run
    lda current_run_bcd        ; print current run number
    jsr print_number_bcd
    rts


print_summary
    lda #<summary_str
    sta str_addr
    lda #>summary_str
    sta str_addr+1
    jsr print_str

    lda current_run_bcd
    jsr print_number_bcd

    lda #<passed_summary_str
    sta str_addr
    lda #>passed_summary_str
    sta str_addr+1
    jsr print_str

    lda passed_runs_bcd
    jsr print_number_bcd

    lda #<failed_summary_str
    sta str_addr
    lda #>failed_summary_str
    sta str_addr+1
    jsr print_str

    lda failed_runs_bcd
    jsr print_number_bcd
    rts


;-------------------------------------------------------------------------
; Read from tape
;-------------------------------------------------------------------------

read_tape
    lda #start_signal
    sta serial_write            ; Enable serial write mode
    nop                         ; Wait 4 cycles for the mode to stabilize
    nop
    nop
    nop
    sta serial_write            ; Signal the start of the tape read
    lda serial_read             ; Switch to the read mode
    nop                         ; Wait 4 cycles for the mode to stabilize
    nop
    nop
    nop
    lda #0                      ; Clear running checksum
    sta running_checksum
    jsr fullcycle               ; Wait until full cycle is detected
    jsr fullcycle               ; Synchronize with full cycle

notstart
    ldy #31                     ; Try to detect the much shorter
    jsr cmplevel                ; start bit
    bcs notstart                ; Start bit not detected yet!

    jsr cmplevel                ; Wait for 2nd phase of start bit

    ldy #58                     ; Set threshold value in middle
rdbyte
    ldx #8                      ; Receiver 8 bits
rdbit
    pha
    jsr fullcycle               ; Detect a full cycle
    pla
    rol                         ; roll new bit into result
    ldy #57                     ; Set threshold value in middle
    dex                         ; Decrement bit counter
    bne rdbit                   ; Read next bit!

    clc
    adc running_checksum        ; Add byte to checksum
    sta running_checksum

    jsr inc_running_addr        ; Increment address
    ldy #53                     ; Compensate threshold with workload
    bcc rdbyte                  ; Do next byte if not done yet!
    rts                         ; Return

fullcycle
    jsr cmplevel                ; Wait for two level changes
cmplevel
    dey                         ; Decrement time counter
    lda tape_in                 ; Get Tape In data
    cmp last_state              ; Same as before?
    beq cmplevel                ; Yes!
    sta last_state              ; Save new data

    cpy #128                    ; Compare threshold
    rts

inc_running_addr
    lda running_addr_l          ; Compare current address with
    cmp hex2_l                  ; end address
    lda running_addr_h
    sbc hex2_h
    inc running_addr_l          ; And increment current address
    bne nocarry                 ; No carry to MSB!
    inc running_addr_h
nocarry
    rts


calculate_checksum
    ldy #$00                    ; set Y=0 for indirect Y mode
    sty checksum                ; and clear checksum variables

    lda #$00                    ; initialize running checksum
    pha
add_to_checksum
    clc                         ; clear carry flag
    pla                         ; pull running checksum
    adc (running_addr_l),Y      ; add byte to running cheksum
    pha                         ; push running checksum

    jsr inc_running_addr        ; increment running address
    bcc add_to_checksum         ; if not done then repeat

    pla                         ; otherwise pull and store running checksum
    sta checksum

    rts


;-------------------------------------------------------------------------
; tool routines
;-------------------------------------------------------------------------
print_str
    ldy #$00                    ; store string length
    lda (str_addr),Y
    sta str_len

    ldx #str_addr               ; skip length byte from string address
    jsr increment_16bit

print_str_loop
    lda (str_addr),Y
    jsr echo
    iny
    cpy str_len
    bne print_str_loop
    rts

print_number_bcd
    pha
    clc
    and #$F0
    rol
    rol
    rol
    rol
    rol
    jsr prhex
print_next_digit
    pla
    and #$0F
    jsr prhex
print_number_done
    rts

increment_16bit
    inc $00,X
    bne increment_16bit_done
    inx
    inc $00,X
increment_16bit_done
    rts

increment_bcd
    sed                       ; enable decimal mode
    clc                       ; increment current run number in BCD
    lda #$01
    adc $00,X
    sta $00,X
    cld                       ; disable decimal mode
    rts

; Static data
pass_str .byt $06,$0D,"PASS "
fail_str .byt $06,$0D,"FAIL "
summary_str .byt $10,$0D,"COMPLETED RUNS "
passed_summary_str .byt $0D,$0D,"PASSED RUNS "
failed_summary_str .byt $0D,$0D,"FAILED RUNS "
